<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>a_coding_story</title><description>Learning to code at Makers Academy</description><link>http://localhost:2368/</link><generator>Ghost 0.6</generator><lastBuildDate>Thu, 03 Sep 2015 10:14:14 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>TDD and Red Green Refactor</title><description>&lt;p&gt;TDD, also known as Test Driven Development is an important part of agile development. In a nutshell, it is about writing tests before any code, making that it sure it fails, then the writing the minimal and simplest code to make it pass, and refactoring the code at the very&lt;/p&gt;</description><link>http://localhost:2368/tdd-and-red-green-cycle/</link><guid isPermaLink="false">7a2ea6ea-f5e6-431c-b4a4-20da1c50178e</guid><dc:creator>Lucy Fang</dc:creator><pubDate>Thu, 03 Sep 2015 10:10:04 GMT</pubDate><content:encoded>&lt;p&gt;TDD, also known as Test Driven Development is an important part of agile development. In a nutshell, it is about writing tests before any code, making that it sure it fails, then the writing the minimal and simplest code to make it pass, and refactoring the code at the very end. This process can be explained using a cycle called Red Green Refactor, see diagram below.  &lt;/p&gt;

&lt;p&gt;&lt;left&gt;&lt;img src="http://www.ruby-software.com/ruby-software/wp-content/uploads/2012/05/bdd-cycle3.png"&gt;&lt;/left&gt;&lt;/p&gt;

&lt;p&gt;There are two key tests involved - Feature Tests and Unit Tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature Tests&lt;/strong&gt; tests one specific functionality e.g. such as a behaviour of a program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unit Tests&lt;/strong&gt; tests the capability of the individual objects in a program isolated from all other objects. &lt;/p&gt;

&lt;p&gt;A Feature Test is conducted prior to the Unit test.&lt;/p&gt;

&lt;h5 id="whatisred"&gt;What is red?&lt;/h5&gt;

&lt;p&gt;Red means watching a test (either Feature or Unit Test) fail. We want the test to first fail because it confirms the validity of the test itself. &lt;/p&gt;

&lt;p&gt;The first thing we do is perform a Feature Test and this involves writing a test for the code we wish we had. This will of course fail as we haven't written any code but this is good news! It means we can write the unit test for the components that make up this feature. Sounds weird, but we want this fail too! And this is for the same reasons as failing the Feature Test because it ensures the validity of the Unit Test. &lt;/p&gt;

&lt;p&gt;Once both tests have failed in the expected way (the right errors), we can begin writing code that will pass both these tests. &lt;/p&gt;

&lt;h5 id="whatisgreen"&gt;What is green?&lt;/h5&gt;

&lt;p&gt;Green means watching your test PASS!! Awesome. The first thing we do is writing the minimal amount of code to pass our Unit Test. This ensure our code stays clean and concise. Once we've passed the unit test, we refactor the code relating to our unit. We run the test again to double check our refactored code passes. &lt;/p&gt;

&lt;p&gt;The next step is to then write code to pass the feature test, adopting the same approach as the Unit Test above. Once again, we refactor and test at the end.&lt;/p&gt;

&lt;h5 id="finalthoughts"&gt;Final thoughts...&lt;/h5&gt;

&lt;p&gt;Once we've completed these steps, we have completed our program in a test-driven way. If we have done this correctly, we should have 100% coverage for our program and also the minimal amount of code possible. &lt;/p&gt;</content:encoded></item><item><title>Pre-Course Week 3: It's all about Ruby!</title><description>&lt;p&gt;This week is all about practicing Ruby and finishing up our Chris Pine and Ruby Kickstart exercises. I switched up between the two just because I struggle with Mr. Pine especially when you've been hit with a cold...I mean why am I sick in summer??? But cold or not,&lt;/p&gt;</description><link>http://localhost:2368/pre-course-week-3-its-all-about-ruby/</link><guid isPermaLink="false">37f9310e-ce64-4dfa-93c5-2136a8bd4bef</guid><dc:creator>Lucy Fang</dc:creator><pubDate>Tue, 25 Aug 2015 14:26:08 GMT</pubDate><content:encoded>&lt;p&gt;This week is all about practicing Ruby and finishing up our Chris Pine and Ruby Kickstart exercises. I switched up between the two just because I struggle with Mr. Pine especially when you've been hit with a cold...I mean why am I sick in summer??? But cold or not, I've soldiered on! &lt;/p&gt;

&lt;p&gt;I've been addicted to doing &lt;strong&gt;&lt;a href="http://www.codewars.com"&gt;Codewars&lt;/a&gt;&lt;/strong&gt; which provides code challenges in a variety of different program languages to help improve your skill and technique. The more problems you solve, the more "honors" you earn and higher you rank up in the ladder of many codewar competitors. It's great fun and the problems get really tough. There are also some extremely creative and smart solutions. When you spent hours coming up with your code to a codewar problem (aka "kata") and only realise there were others that wrote them in one line, you get stumped and amazed! But while I think code needs to be clear and concise, it's also important to write code that's can be easily read and understood. I think this makes it easier for others to work with your code and build upon it or change it if needed. I try to break the problems down into chucks first and then refactor afterwards. That's another new word for me- refactoring. This is the process of when improving the code without changing what it's intended to do. So many new things to learn and I think I'm only scratching the surface at the moment.  &lt;/p&gt;

&lt;p&gt;Some of us in the September class also met up at Makers Academy to do some &lt;strong&gt;pair-programming&lt;/strong&gt;. It was a great afternoon as I got the feel of what it's like to code and solve problems together as well as getting to know the Makers Academy space. We'll be doing a lot more of pair-programming so I'm looking forward to learning from others and sharing my knowledge. I also met up with my mentor who gave some tips about the course and we also worked on a Codewar problem together. While in the middle of this, a loud "GONG" sound went off and everyone on the floor cheered. I seriously thought it was beer time but it actually meant someone has landed a job! I like how Makers is so focused on preparing us to be job-ready and it is possible to get work if you do the work! &lt;/p&gt;</content:encoded></item><item><title>Pre-course Week 2: Getting Git</title><description>&lt;p&gt;Week two of the Makers Pre-course was all about learning Git and Github. I remember just a few weeks ago, I was looking at Github and thinking I don't get what this is about and how to use it!&lt;/p&gt;

&lt;p&gt;After going through Maker's online learning and git immersion exercises, I&lt;/p&gt;</description><link>http://localhost:2368/getting-git/</link><guid isPermaLink="false">3ebc832a-ab9e-449f-93ae-cea28c8983fe</guid><dc:creator>Lucy Fang</dc:creator><pubDate>Tue, 18 Aug 2015 15:04:59 GMT</pubDate><content:encoded>&lt;p&gt;Week two of the Makers Pre-course was all about learning Git and Github. I remember just a few weeks ago, I was looking at Github and thinking I don't get what this is about and how to use it!&lt;/p&gt;

&lt;p&gt;After going through Maker's online learning and git immersion exercises, I am now adding, committing, pushing, pulling, cloning, and forking like never before. I can now see why keeping a local repository and a remote repository is so important when you are working and collaborating with others on projects. No doubt when the course starts, I'm sure we will be using both of these every day to track our work. &lt;/p&gt;

&lt;p&gt;It's important not to get confused between &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; and &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;. They are different. Git is an open source version control system that allows you manage projects and keep track of it's changes on your computer. Github is a Git repository hosting service that allows you keep a copy of your code online so you can work and collaborate with others. Github isn't the only Git repo service available (e.g. Bitbucket) but it's a pretty damn good one from what I've seen and used so far.&lt;/p&gt;

&lt;p&gt;Asides from Git and Github, I've been doing Josh Cheek's Ruby Kickstart and Chris Pine's Learn to Program. I find Chris Pine harder to understand  but it's a good workout on my brain. There's so much to cover so I better get back to it!&lt;/p&gt;</content:encoded></item><item><title>It's the start of something new...</title><description>&lt;p&gt;...for Lucy. That's me. And this is my story on how I'm learning to be a coder...with the help of Makers Academy!&lt;/p&gt;

&lt;h3 id="whydoiwanttocode"&gt;Why do I want to code?&lt;/h3&gt;

&lt;p&gt;Having worked in the marketing and communications area for over a decade, I was always in awe of the brilliant technicians&lt;/p&gt;</description><link>http://localhost:2368/welcome-to-ghost/</link><guid isPermaLink="false">416e0067-d8e5-462a-8903-de27191f14b9</guid><category>Getting Started</category><dc:creator>Lucy Fang</dc:creator><pubDate>Thu, 13 Aug 2015 18:33:40 GMT</pubDate><content:encoded>&lt;p&gt;...for Lucy. That's me. And this is my story on how I'm learning to be a coder...with the help of Makers Academy!&lt;/p&gt;

&lt;h3 id="whydoiwanttocode"&gt;Why do I want to code?&lt;/h3&gt;

&lt;p&gt;Having worked in the marketing and communications area for over a decade, I was always in awe of the brilliant technicians who can create, build, and make amazing websites and applications. While I found managing various projects was a great experience, I never felt completely satisfied with sitting on the bench. I always envied their technical skills and wished "I could do that!". So it was time to stop wishing, wondering and self-doubting, and give myself a chance to learn. I started self-learning online after work and found that I actually enjoyed coming home to code rather than work! That's a sure sign that you actually love what you are learning! I decided that even if I wasn't any good, there would be no regrets and I won't be left wondering what could have been! Besides, "you gotta risk it to get the biscuit". I can't remember who said that.&lt;/p&gt;

&lt;p&gt;So here begins my journey to learn to code with Makers Academy. And why Makers? There's so many ways to learn and you've got to pick the one that's right for you. I looked into all options including learning on my own, online courses or bootcamps like Makers. I chose Makers because of their curriculum, supportive teachers and open learning environment. I also wanted to meet new people, learn from others and have that face-to-face contact.&lt;/p&gt;

&lt;h3 id="precourseweek1sofar"&gt;Pre-course Week 1 so far...&lt;/h3&gt;

&lt;p&gt;The bootcamp at Makers is 12 weeks and there's one month pre-course. The pre-course is important to help prep us for the bootcamp so there's heaps to do. We are given exercises and challenges to do every week and week 1 is all about the command line! I never realised how powerful and useful the command line is! I feel like everything is at my fingertips (pause for a Mr. Burns moment) and that gives me much satisfaction! I will sure be using it a lot more.&lt;/p&gt;</content:encoded></item></channel></rss>