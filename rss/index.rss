<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>a_coding_story</title><description>My adventures with Makers Academy  

</description><link>http://localhost:2368/</link><generator>Ghost 0.6</generator><lastBuildDate>Tue, 08 Sep 2015 22:43:23 GMT</lastBuildDate><atom:link href="http://localhost:2368/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Weekend Challenge 1: Airport</title><description>&lt;p&gt;The coding doesn't stop just because we've hit the weekend. Every Friday at 5pm, we get a weekend challenge that aims to test our knowledge on the week's learnings. The last weekend, I built a program that will control the flow of planes at an airport. The features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it&lt;/li&gt;&lt;/ul&gt;</description><link>http://localhost:2368/weekend-challenge-1/</link><guid isPermaLink="false">a4e52186-ced0-48fc-8806-8dc8126fbb5e</guid><dc:creator>Lucy Fang</dc:creator><pubDate>Tue, 08 Sep 2015 21:31:07 GMT</pubDate><content:encoded>&lt;p&gt;The coding doesn't stop just because we've hit the weekend. Every Friday at 5pm, we get a weekend challenge that aims to test our knowledge on the week's learnings. The last weekend, I built a program that will control the flow of planes at an airport. The features include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it allows pilots to land planes and take off from the airport &lt;/li&gt;
&lt;li&gt;it allows air traffic controller to prevent planes from landing when it's full&lt;/li&gt;
&lt;li&gt;when the weather is stormy, it allows the air traffic controller to prevent planes from landing or taking off. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;During the week, we spend a lot of time exploring the week's challenge and trying out different solutions. The weekend actually gives me the space to absorb the learnings and put it into practice on my own. I started by thinking about the problem and the user stories and how to organise my classes. It can be tricky not to overthink the problem and making it harder for yourself. Always start with the Minimum Viable Product (MVP) and listing what the objects are and their responsibilities. You can then extend it from there. &lt;/p&gt;

&lt;p&gt;The other interesting thing was testing my weather method which uses an in-built ruby method &lt;code&gt;rand&lt;/code&gt;. It was the only test that wasn't passing &lt;a href="https://coveralls.io/"&gt;Coveralls&lt;/a&gt;- a platform that checks how much of your code is covered by your tests. I wasn't sure how to test random itself. The tricky thing with testing the random method is that in order to test if it's working properly, you have to know what to expect, and that's not possible if the random number is generated every time the test is run. &lt;/p&gt;

&lt;p&gt;I asked my cohort buddy Yana for some advice and she taught me how to test random using &lt;code&gt;srand&lt;/code&gt; which lets you pick the seed number so you can generate a sequence of numbers that seems random, but is actually predictable. Here is an example:&lt;/p&gt;

&lt;p&gt;First you seed the number which just gives you a list of random numbers&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;srand(1234)
=&amp;gt; 244615853692375567264193332865866353245
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the next rand method you use will use this seed number and generate a seeded sequence. So that when you use the rand on a number, it will give you the same number when you use it. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rand
=&amp;gt; 0.1915194503788923
rand
=&amp;gt; 0.6221087710398319
rand(10)
=&amp;gt; 4
rand(400)
=&amp;gt; 152
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to show that you can run the same sequence again...    &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rand(1234)
=&amp;gt; 1234
rand
=&amp;gt; 0.1915194503788923
rand
=&amp;gt; 0.6221087710398319
rand(10)
=&amp;gt; 4
rand(400)
=&amp;gt; 152
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The seed you set works only once, so the next time you call &lt;code&gt;rand&lt;/code&gt;, it will not use your specified seed number.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rand(1234)
=&amp;gt; 1234
rand
=&amp;gt; 0.1915194503788923
rand
=&amp;gt; 0.6221087710398319
rand(10)
=&amp;gt; 4
rand(400)
=&amp;gt; 152
rand(400)
=&amp;gt; 144
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anyway that's my attempt at explaining &lt;code&gt;srand&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;On Monday, one of the Senior cohort memebers conducted a code review with us and gave us tips on how we can improve our Airport program. Our coaches will also complete this. It was really helpful to discuss the code in detail and look for opportunities to refactor our code.&lt;/p&gt;

&lt;p&gt;This week we are building the battleships game so I will post a recap later in the week!&lt;/p&gt;</content:encoded></item><item><title>SOLID: Dependency Inversion</title><description>&lt;p&gt;Describe the SOLID principle of dependency inversion, by giving an example of dependency injection with a module and a class. How does DI improve the reusability of code?&lt;/p&gt;

&lt;h6 id="whatisthesolidprincipleofdependencyinversion"&gt;What is the SOLID principle of dependency inversion?&lt;/h6&gt;

&lt;p&gt;The last SOLID principle is called dependency inversion and it refers to a specific&lt;/p&gt;</description><link>http://localhost:2368/solid-dependency-inversion/</link><guid isPermaLink="false">d15fab4d-333a-4ee2-b8c4-754f8c6a80cd</guid><dc:creator>Lucy Fang</dc:creator><pubDate>Tue, 08 Sep 2015 10:32:20 GMT</pubDate><content:encoded>&lt;p&gt;Describe the SOLID principle of dependency inversion, by giving an example of dependency injection with a module and a class. How does DI improve the reusability of code?&lt;/p&gt;

&lt;h6 id="whatisthesolidprincipleofdependencyinversion"&gt;What is the SOLID principle of dependency inversion?&lt;/h6&gt;

&lt;p&gt;The last SOLID principle is called dependency inversion and it refers to a specific form of decoupling software modules. It has two parts:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions. If high-level modules are dependent on the details of the lower-level modules, and if these details change, then you will have to change the high-level modules as well.  &lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Abstractions should not depend upon details. Details should depend upon abstractions. Abstraction is a mechanism and practice to reduce and factor out details so that one can focus on a few concepts at a time. &lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is an example without abstracting:&lt;/p&gt;

&lt;p&gt;Suppose we have a Dog class that has a method called speak and another class named Wolf that has a bark method. &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Dog
   def speak
     Wolf.new.bark
   end
end

class Wolf
  def bark
    puts 'Bark!'
  end
end  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be refactored using abstractions by:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Dog
   def speak(breed)
     breed.bark
   end
end

class Wolf
  def bark
    puts 'Bark!'
  end
end  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This approach is better because if we wanted to use another breed class (lower-level module), such as Labrador, we can use the speak method inside the Dog class (higher-level module) by passing an instance of a new breed as an argument into the speak method instead of hard coding a different breed class into the speak method.  &lt;/p&gt;</content:encoded></item><item><title>W1: Test-Driven all the way</title><description>&lt;p&gt;First week at Makers has come to an end and it did not disappoint. It was absolutely jam-packed with learning opportunities and social activities. I had a fabulous time. &lt;/p&gt;

&lt;p&gt;After Day 1, it was straight down to the business of learning &lt;a href="http://lucetzer.github.io/tdd-and-red-green-cycle/"&gt;Test Driven Development&lt;/a&gt; and Object Oriented Design which is&lt;/p&gt;</description><link>http://localhost:2368/week-1-recap/</link><guid isPermaLink="false">18ff3219-e356-477a-81e3-7d336cdc9d4f</guid><dc:creator>Lucy Fang</dc:creator><pubDate>Sun, 06 Sep 2015 17:44:58 GMT</pubDate><content:encoded>&lt;p&gt;First week at Makers has come to an end and it did not disappoint. It was absolutely jam-packed with learning opportunities and social activities. I had a fabulous time. &lt;/p&gt;

&lt;p&gt;After Day 1, it was straight down to the business of learning &lt;a href="http://lucetzer.github.io/tdd-and-red-green-cycle/"&gt;Test Driven Development&lt;/a&gt; and Object Oriented Design which is all about modelling objects and how they will send messages to each other. Everything we code from now on will be tested. It is the best way to ensure our code works and is clean, concise and insured! It is also the best industry practice and I can understand why. &lt;/p&gt;

&lt;p&gt;This has been our daily routine so far:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stand-up at 9am sharp&lt;/li&gt;
&lt;li&gt;Pair-program with a different partner everyday on our project&lt;/li&gt;
&lt;li&gt;Lunch&lt;/li&gt;
&lt;li&gt;Optional meditation class at 2pm&lt;/li&gt;
&lt;li&gt;Afternoon stand-up&lt;/li&gt;
&lt;li&gt;Pair-program again until late&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I love it so far and you get into the rhythm of this pretty quickly. There are also other activities like ping-pong and yoga on selected days. It helps us to clear our heads and not be desk-bound all day. Looking after our mental health is also very important so we have energy and focus to keep going.  &lt;/p&gt;

&lt;h5 id="thisweeksprojectborisbikes"&gt;This week's project: Boris Bikes&lt;/h5&gt;

&lt;p&gt;This week's project was to write a program for a bike hire system. Bikes are located at docking stations throughout the city and anyone can hire them for a small fee. Our system will allow bikes to be released, returned and ensure any reported broken bikes can not be released. After all we want happy and satisfied customers. &lt;/p&gt;

&lt;p&gt;&lt;left&gt;&lt;img src="http://www.fodors.com/wire/5--melbournebikeshare.jpg"&gt;&lt;/left&gt; &lt;br&gt;
&lt;em&gt;Boris Bikes in Melbourne&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The very first thing we do is understand the users stories which is important. User stories helps us identify objects and their responsibilities. We need to decide what are their behaviours and who do they need to send messages to in order for the system to work. What amazes me is how fun this is. We are actually modelling real life things, processes and situations. All the pre-course work provides a good foundation to start applying our Ruby methods in this way. It's like that was the toolbox and they are what we need to build our program. &lt;/p&gt;

&lt;p&gt;Was the project hard? Yes, but not impossible. The rspec testing was all new to us as well as the rspec syntax but this is just part of the journey and we are in this playground so we can experiment and learn. Pair-programming was also great. It's like like ping-pong and having a buddy to bounce with. I've pair-programmed with three partners this week and I've learnt so much from each of them. Much love to Yana, Harry and Harriet. You guys rock my world! Yana is from Moscow and I am just in love with her accent. Her english is fantastic and she very thorough, methodical and also a quick thinker. Harry is just a ball of fun to analyse problems with. He will suddenly come up with an idea and BOOM, it works like magic. Harriet is also amazing and we just never quit at the problem. It's like we are on the battlefield and we just soldier through. I'm so thankful they are in this cohort! You guys rocked my world this week! &lt;/p&gt;

&lt;p&gt;The other thing I want to mention is our stand-ups. We are split into different groups and twice a day, the group meets up. This is where we get the opportunity to ask questions on anything we don't understand. Our group coach then goes through it all with us in detail. It's a fantastic session and the coaches are just wonderful. They are able to explain concepts in a way that's easy to digest. I had Samm this week and I am in awe of the way he explains things. Not only is he extremely knowledgable but he is also very patient and approachable. Lucky us!&lt;/p&gt;

&lt;p&gt;In other news, there's been a lot of pub nights. At this rate, I'm seriously going to get a beer gut. I think I need to just go on Fridays but even as I type this, I'm not confident that it will happen. :)&lt;/p&gt;</content:encoded></item><item><title>DAY 1 at Makers</title><description>&lt;p&gt;First day at Makers. It's finally here. I arrived at Makers early, full of excitement, curiosity and not knowing what the day will bring. Meeting my fellow cohort buddies was just awesome. EVERYONE is so lovely and excited to learn. We were all wondering what first day will bring? After&lt;/p&gt;</description><link>http://localhost:2368/day-1-at-makers/</link><guid isPermaLink="false">56b522d6-7cf1-49bb-a632-bd35cf79f0fb</guid><dc:creator>Lucy Fang</dc:creator><pubDate>Thu, 03 Sep 2015 22:52:16 GMT</pubDate><content:encoded>&lt;p&gt;First day at Makers. It's finally here. I arrived at Makers early, full of excitement, curiosity and not knowing what the day will bring. Meeting my fellow cohort buddies was just awesome. EVERYONE is so lovely and excited to learn. We were all wondering what first day will bring? After all the introduction, are we going to pair-program today? What will be the challenge? What other surprises are there?&lt;/p&gt;

&lt;p&gt;But first day was not what I expected. There was no coding! It was just a day dedicated to getting to know each other, meeting our coaches and understanding how the course will run for the next 12 weeks. There are around 34 people in the cohort, the biggest ever at Makers and we all played this name game where that allowed us all to remember EVERYONE'S name. It was brilliant and I won't spoil it for anyone who is thinking about joining Makers (just do it! :D). &lt;/p&gt;

&lt;p&gt;Makers also offers meditation everyday at 2pm (with Chief Joy Officer) and yoga on Mondays and Thursdays. Doctor Joy (aka Dana) is responsible for our happiness (and probably sanity!) and is literally a walking sunshine. She literally beams and oozes joy. Yep, I certainly want to get some of that joyfulness to keep me going. &lt;/p&gt;

&lt;p&gt;We finished early and ended up at the local pub. I have a feeling this is going to be a regular pitstop! It was a great day and I know the hard work starts tomorrow. Bring it on. &lt;/p&gt;</content:encoded></item><item><title>Pre-Course Week 4: More Ruby!</title><description>&lt;p&gt;We are onto the last week of the pre-course before bootcamp starts so last chance to learn as much as possible before course starts!&lt;/p&gt;

&lt;p&gt;I've been doing Codewars and reading the &lt;strong&gt;The Well-Grounded Rubyist&lt;/strong&gt; by David A. Black. So far, it's been a good resource to help you to understand&lt;/p&gt;</description><link>http://localhost:2368/pre-course-week-4-more-ruby/</link><guid isPermaLink="false">13b98287-c703-4aa8-86e5-828297515fb0</guid><dc:creator>Lucy Fang</dc:creator><pubDate>Thu, 03 Sep 2015 21:33:26 GMT</pubDate><content:encoded>&lt;p&gt;We are onto the last week of the pre-course before bootcamp starts so last chance to learn as much as possible before course starts!&lt;/p&gt;

&lt;p&gt;I've been doing Codewars and reading the &lt;strong&gt;The Well-Grounded Rubyist&lt;/strong&gt; by David A. Black. So far, it's been a good resource to help you to understand the fundamentals of the Ruby language and has plenty of examples with line-by-line explanations. There are still a few elements in there that I scratch my head at particularly the last couple of chapters! Maybe in time with more practice, I will understand it more?! I hope!&lt;/p&gt;

&lt;p&gt;In between reading and doing Codewars, I've been practicing Ruby Zen by doing &lt;a href="http://rubykoans.com/"&gt;Ruby Koans&lt;/a&gt;. At first, I was like huh? what is this path to enlightenment that I've embarked on? The format was very different and it's essentially a a list of exercises that walks you through the Ruby language, its syntax and common function BUT it asks you fix code (filling in the missing elements) in order for it to work. It's good to switch different modes of thinking to test your understanding. &lt;/p&gt;

&lt;p&gt;We were also asked to look at TDD (Test Driven Development aka Behaviour Driven Development) using a tool called rspec. From what I understand so far, it's an important part of the agile development process and involves coding, testing and refactoring your code. The process of TDD is to write the test (before you write any code), watch it fail and then write the simplest amount of code in order for the program to work. I can't wait to get to know TDD better when the course starts. The last month has absolutely gone by in a blink and no more late mornings!&lt;/p&gt;

&lt;p&gt;It's time to go back to school. I hope I survive the next 12 weeks!&lt;/p&gt;</content:encoded></item><item><title>TDD and Red Green Refactor</title><description>&lt;p&gt;TDD, also known as Test Driven Development is an important part of agile development. In a nutshell, it is about writing tests before any code, making that it sure it fails, then the writing the minimal and simplest code to make it pass, and refactoring the code at the very&lt;/p&gt;</description><link>http://localhost:2368/tdd-and-red-green-cycle/</link><guid isPermaLink="false">7a2ea6ea-f5e6-431c-b4a4-20da1c50178e</guid><dc:creator>Lucy Fang</dc:creator><pubDate>Thu, 03 Sep 2015 10:10:04 GMT</pubDate><content:encoded>&lt;p&gt;TDD, also known as Test Driven Development is an important part of agile development. In a nutshell, it is about writing tests before any code, making that it sure it fails, then the writing the minimal and simplest code to make it pass, and refactoring the code at the very end. This process can be explained using a cycle called Red Green Refactor, see diagram below.  &lt;/p&gt;

&lt;p&gt;&lt;left&gt;&lt;img src="http://www.ruby-software.com/ruby-software/wp-content/uploads/2012/05/bdd-cycle3.png"&gt;&lt;/left&gt;&lt;/p&gt;

&lt;p&gt;There are two key tests involved - Feature Tests and Unit Tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Feature Tests&lt;/strong&gt; tests one specific functionality e.g. such as a behaviour of a program.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Unit Tests&lt;/strong&gt; tests the capability of the individual objects in a program isolated from all other objects. &lt;/p&gt;

&lt;p&gt;A Feature Test is conducted prior to the Unit test.&lt;/p&gt;

&lt;h5 id="whatisred"&gt;What is red?&lt;/h5&gt;

&lt;p&gt;Red means watching a test (either feature or unit test) fail. We want the test to first fail because it confirms the validity of the test itself. &lt;/p&gt;

&lt;p&gt;The first thing we do is perform a feature test and this involves writing a test for the code we wish we had. This will of course fail as we haven't written any code but this is good news! It means we can write the unit test for the components that make up this feature. Sounds weird, but we also want this to fail too! And this is for the same reasons as failing the feature test because it ensures the validity of the unit test. There may be multiple unit tests for each feature test. &lt;/p&gt;

&lt;p&gt;Once both tests have failed in the expected way (the right errors), we can begin writing code that will pass both these tests. &lt;/p&gt;

&lt;h5 id="whatisgreen"&gt;What is green?&lt;/h5&gt;

&lt;p&gt;Green means watching your test PASS!! Awesome. The first thing we do is writing the minimal amount of code to pass our unit test. This ensures our code stays clean and concise. Once we've passed the unit test, we refactor the code relating to our unit. We run the test again to double check our refactored code passes. &lt;/p&gt;

&lt;p&gt;The next step is to then write code to pass the feature test, adopting the same approach as the unit test above. Once again, we refactor and test at the end.&lt;/p&gt;

&lt;h5 id="finalthoughts"&gt;Final thoughts...&lt;/h5&gt;

&lt;p&gt;Once we've completed these steps, we have completed our program in a test-driven way. If we have done this correctly, we should have 100% coverage for our program and also the minimal amount of code possible. &lt;/p&gt;</content:encoded></item><item><title>Pre-Course Week 3: It's all about Ruby!</title><description>&lt;p&gt;This week is all about practicing Ruby and finishing up our Chris Pine and Ruby Kickstart exercises. I switched up between the two just because I struggle with Mr. Pine especially when you've been hit with a cold...I mean why am I sick in summer??? But cold or not,&lt;/p&gt;</description><link>http://localhost:2368/pre-course-week-3-its-all-about-ruby/</link><guid isPermaLink="false">37f9310e-ce64-4dfa-93c5-2136a8bd4bef</guid><dc:creator>Lucy Fang</dc:creator><pubDate>Tue, 25 Aug 2015 14:26:08 GMT</pubDate><content:encoded>&lt;p&gt;This week is all about practicing Ruby and finishing up our Chris Pine and Ruby Kickstart exercises. I switched up between the two just because I struggle with Mr. Pine especially when you've been hit with a cold...I mean why am I sick in summer??? But cold or not, I've soldiered on! &lt;/p&gt;

&lt;p&gt;I've been addicted to doing &lt;strong&gt;&lt;a href="http://www.codewars.com"&gt;Codewars&lt;/a&gt;&lt;/strong&gt; which provides code challenges in a variety of different program languages to help improve your skill and technique. The more problems you solve, the more "honors" you earn and higher you rank up in the ladder of many codewar competitors. It's great fun and the problems get really tough. There are also some extremely creative and smart solutions. When you spent hours coming up with your code to a codewar problem (aka "kata") and only realise there were others that wrote them in one line, you get stumped and amazed! But while I think code needs to be clear and concise, it's also important to write code that's can be easily read and understood. I think this makes it easier for others to work with your code and build upon it or change it if needed. I try to break the problems down into chucks first and then refactor afterwards. That's another new word for me- refactoring. This is the process of when improving the code without changing what it's intended to do. So many new things to learn and I think I'm only scratching the surface at the moment.  &lt;/p&gt;

&lt;p&gt;Some of us in the September class also met up at Makers Academy to do some &lt;strong&gt;pair-programming&lt;/strong&gt;. It was a great afternoon as I got the feel of what it's like to code and solve problems together as well as getting to know the Makers Academy space. We'll be doing a lot more of pair-programming so I'm looking forward to learning from others and sharing my knowledge. I also met up with my mentor who gave some tips about the course and we also worked on a Codewar problem together. While in the middle of this, a loud "GONG" sound went off and everyone on the floor cheered. I seriously thought it was beer time but it actually meant someone has landed a job! I like how Makers is so focused on preparing us to be job-ready and it is possible to get work if you do the work! &lt;/p&gt;</content:encoded></item><item><title>Pre-course Week 2: Getting Git</title><description>&lt;p&gt;Week two of the Makers Pre-course was all about learning Git and Github. I remember just a few weeks ago, I was looking at Github and thinking I don't get what this is about and how to use it!&lt;/p&gt;

&lt;p&gt;After going through Maker's online learning and git immersion exercises, I&lt;/p&gt;</description><link>http://localhost:2368/getting-git/</link><guid isPermaLink="false">3ebc832a-ab9e-449f-93ae-cea28c8983fe</guid><dc:creator>Lucy Fang</dc:creator><pubDate>Tue, 18 Aug 2015 15:04:59 GMT</pubDate><content:encoded>&lt;p&gt;Week two of the Makers Pre-course was all about learning Git and Github. I remember just a few weeks ago, I was looking at Github and thinking I don't get what this is about and how to use it!&lt;/p&gt;

&lt;p&gt;After going through Maker's online learning and git immersion exercises, I am now adding, committing, pushing, pulling, cloning, and forking like never before. I can now see why keeping a local repository and a remote repository is so important when you are working and collaborating with others on projects. No doubt when the course starts, I'm sure we will be using both of these every day to track our work. &lt;/p&gt;

&lt;p&gt;It's important not to get confused between &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; and &lt;a href="https://github.com/"&gt;Github&lt;/a&gt;. They are different. Git is an open source version control system that allows you manage projects and keep track of it's changes on your computer. Github is a Git repository hosting service that allows you keep a copy of your code online so you can work and collaborate with others. Github isn't the only Git repo service available (e.g. Bitbucket) but it's a pretty damn good one from what I've seen and used so far.&lt;/p&gt;

&lt;p&gt;Asides from Git and Github, I've been doing Josh Cheek's Ruby Kickstart and Chris Pine's Learn to Program. I find Chris Pine harder to understand  but it's a good workout on my brain. There's so much to cover so I better get back to it!&lt;/p&gt;</content:encoded></item><item><title>It's the start of something new...</title><description>&lt;p&gt;...for Lucy. That's me. I'm an Aussie traveller who decided to give up the comfortable Melbournian life for the hustle and bustle of London. Moving countries was certainly not easy but I think learning to code is even more of a challenge and this blog is about how I'm learning&lt;/p&gt;</description><link>http://localhost:2368/welcome-to-ghost/</link><guid isPermaLink="false">416e0067-d8e5-462a-8903-de27191f14b9</guid><category>Getting Started</category><dc:creator>Lucy Fang</dc:creator><pubDate>Thu, 13 Aug 2015 18:33:40 GMT</pubDate><content:encoded>&lt;p&gt;...for Lucy. That's me. I'm an Aussie traveller who decided to give up the comfortable Melbournian life for the hustle and bustle of London. Moving countries was certainly not easy but I think learning to code is even more of a challenge and this blog is about how I'm learning to be a developer with the help of &lt;a href="http://www.makersacademy.com/"&gt;Makers Academy&lt;/a&gt;!&lt;/p&gt;

&lt;h6 id="whydoiwanttocode"&gt;Why do I want to code?&lt;/h6&gt;

&lt;p&gt;Having worked in the marketing and communications area for over a decade, I was always in awe of the brilliant technicians who can create, build, and make amazing websites and applications. While I found managing various projects was a great experience, I never felt completely satisfied with sitting on the bench. I always envied their technical skills and wished "I could do that!". So it was time to stop wishing, wondering and self-doubting, and give myself a chance to learn. I started self-learning online after work and found that I actually enjoyed coming home to code rather than work! That's a sure sign that you actually love what you are learning! I decided that even if I wasn't any good, there would be no regrets and I won't be left wondering what could have been! Besides, "you gotta risk it to get the biscuit". I can't remember who said that.&lt;/p&gt;

&lt;p&gt;So here begins my journey to learn to code with Makers Academy. And why Makers? There's so many ways to learn and you've got to pick the one that's right for you. I looked into all options including learning on my own, online courses or bootcamps like Makers. I chose Makers because of their curriculum, supportive teachers and open learning environment. I also wanted to meet new people, learn from others and have that face-to-face contact. I was absolutely thrilled when I got accepted. Their application process consisted of an application submission and follow-up interview. All I can say is do the homework they tell you and ask lots of questions to make sure this is the course for you. &lt;/p&gt;

&lt;h6 id="precourseweek1sofar"&gt;Pre-course Week 1 so far...&lt;/h6&gt;

&lt;p&gt;The bootcamp at Makers is 12 weeks and there's one month pre-course. The pre-course is important to help prep us for the bootcamp so there's heaps to do. We are given exercises and challenges to do every week and week 1 is all about the command line! I never realised how powerful and useful the command line is! I feel like everything is at my fingertips (pause for a Mr. Burns moment) and that gives me much satisfaction! I will sure be using it a lot more.&lt;/p&gt;</content:encoded></item></channel></rss>